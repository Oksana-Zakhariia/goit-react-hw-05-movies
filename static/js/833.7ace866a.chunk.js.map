{"version":3,"file":"static/js/833.7ace866a.chunk.js","mappings":"4LACaA,EAAS,WACpB,OACE,SAAC,KAAD,CACEC,OAAQ,IACRC,MAAO,IACPC,OAAQ,EACRC,MAAM,YACNC,UAAU,wBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,GAGd,C,qICVDC,EAAAA,EAAAA,SAAAA,QAAyB,gCAClB,I,MAAMC,EAAiB,mCAAG,WAAMC,GAAN,yFACRF,EAAAA,EAAAA,IAAA,+BAJT,mCAIS,kBACoBE,EADpB,MADQ,uBACvBC,EADuB,EACvBA,KADuB,kBAIxBA,EAAKC,SAJmB,2CAAH,sD,kBCJjBC,EAAQC,EAAAA,GAAAA,MAAH,wOAWLC,EAASD,EAAAA,GAAAA,OAAH,wM,SCRNE,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOR,EAAP,KAAcS,EAAd,KAaA,OACE,kBAAMF,SAVa,SAAAG,GACnBA,EAAMC,iBACe,KAAjBX,EAAMY,QAIVL,EAASP,GACTS,EAAS,KAJPI,MAAM,0BAKT,EAEC,WACE,SAACV,EAAD,CACEW,aAAa,MACbC,MAAOf,EACPgB,YAAY,sBACZC,KAAK,OACLC,SAnBc,SAAAR,GAClBD,EAASC,EAAMS,OAAOJ,MAAMK,cAC7B,KAmBG,SAACf,EAAD,CAAQY,KAAK,SAAb,sBAGL,E,SC3BYI,GAAWjB,EAAAA,EAAAA,IAAOkB,EAAAA,KAAPlB,CAAH,iH,OCCRmB,EAAY,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,yBACGF,IACC,wBACGA,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACV,yBACE,UAACR,EAAD,CAAUS,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMP,GAA9C,WACE,SAAC,MAAD,CAAYQ,KAAK,UACjB,wBAAKJ,QAHAD,EADC,OAYrB,E,SCfc,SAASM,IACtB,OAAwCC,EAAAA,EAAAA,mBAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA8B7B,EAAAA,EAAAA,WAAS,GAAvC,eAAO8B,EAAP,KAAgBC,EAAhB,KACA,GAA0B/B,EAAAA,EAAAA,UAAS,MAAnC,eAAOgC,EAAP,KAAcC,EAAd,KACA,GAA4BjC,EAAAA,EAAAA,UAAS,IAArC,eAAOgB,EAAP,KAAekB,EAAf,KACM1C,EAAQoC,EAAaO,IAAI,UAK/BC,EAAAA,EAAAA,YAAU,WACR,GAAK5C,EAAL,CAGA,IAAM6C,EAAe,mCAAG,oGAEpBN,GAAW,GAFS,SAGDxC,EAAkBC,GAHjB,OAGdC,EAHc,OAIpByC,EAAUzC,GAJU,gDAMpBwC,EACE,wEAPkB,yBAUpBF,GAAW,GAVS,4EAAH,qDAarBM,GAdC,CAeF,GAAE,CAAC7C,IAOJ,OACE,gCACGsC,IAAW,SAACjD,EAAA,EAAD,IACXmD,GACC,wEACF,SAAClC,EAAD,CACEC,SAnCe,SAAAP,GACnBqC,EAAgB,CAAErC,MAAOA,GAC1B,EAkCKkB,SAZoB,SAAAlB,GAExBqC,EAD6B,KAAVrC,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAEhD,EAUKe,MAAOf,KAET,SAACuB,EAAD,CAAWC,OAAQA,MAGxB,C","sources":["components/Loader/Loader.js","services/fetchMoviesByName.js","components/SearchBar/SearchBar.styled.js","components/SearchBar/SearchBar.js","components/MovieList/MovieList.styled.js","components/MovieList/MovieList.js","components/pages/Movies/Movies.js"],"sourcesContent":["import { BallTriangle } from 'react-loader-spinner';\nexport const Loader = () => {\n  return (\n    <BallTriangle\n      height={100}\n      width={100}\n      radius={5}\n      color=\"slateblue\"\n      ariaLabel=\"ball-triangle-loading\"\n      wrapperClass={{}}\n      wrapperStyle=\"\"\n      visible={true}\n    />\n  );\n};\n","import axios from 'axios';\n\nconst API_KEY = 'c65b1581ed69fd3b6701ed620730aaec';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nexport const fetchMoviesByName = async query => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query} `\n  );\n  return data.results;\n};\n","import styled from 'styled-components';\nexport const Input = styled.input`\n  width: 300px;\n  padding: 8px 16px;\n  outline: none;\n  border-radius: 5px;\n  border: 2px solid slateblue;\n  background-color: aliceblue;\n  color: slateblue;\n  font-size: 18px;\n  margin-right: 40px;\n`;\nexport const Button = styled.button`\n  height: 40px;\n  width: 100px;\n  color: white;\n  outline: none;\n  font-size: 18px;\n  background-color: slateblue;\n  border-radius: 5px;\n  border: 2px solid slateblue;\n`;\n","import { useState } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { Input, Button } from './SearchBar.styled';\n\nexport const SearchBar = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n  const handleInput = event => {\n    setQuery(event.target.value.toLowerCase());\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (query.trim() === '') {\n      alert('Write search parameters');\n      return;\n    }\n    onSubmit(query);\n    setQuery('');\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <Input\n        autoComplete=\"off\"\n        value={query}\n        placeholder=\"Enter the film name\"\n        type=\"text\"\n        onChange={handleInput}\n      ></Input>\n      <Button type=\"submit\">Search</Button>\n    </form>\n  );\n};\n\nSearchBar.propTypes = { onSubmit: PropTypes.func.isRequired };\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const FilmLink = styled(Link)`\n  color: slateblue;\n  text-decoration: none;\n  display: flex;\n  align-items: center;\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { FilmLink } from './MovieList.styled';\nimport { FcFilmReel } from 'react-icons/fc';\nexport const MovieList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <div>\n      {movies && (\n        <ul>\n          {movies.map(({ id, title }) => (\n            <li key={id}>\n              <FilmLink to={`/movies/${id}`} state={{ from: location }}>\n                <FcFilmReel size=\"24px\" />\n                <h2>{title}</h2>\n              </FilmLink>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMoviesByName } from 'services/fetchMoviesByName';\nimport { SearchBar } from 'components/SearchBar/SearchBar';\nimport { MovieList } from 'components/MovieList/MovieList';\nimport { Loader } from 'components/Loader/Loader';\n\nexport default function Movies() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [movies, setMovies] = useState([]);\n  const query = searchParams.get('query');\n  const handleSubmit = query => {\n    setSearchParams({ query: query });\n  };\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    const getMoviesByName = async () => {\n      try {\n        setLoading(true);\n        const data = await fetchMoviesByName(query);\n        setMovies(data);\n      } catch {\n        setError(\n          'There is some problems with loading this page. Please try to reload.'\n        );\n      } finally {\n        setLoading(false);\n      }\n    };\n    getMoviesByName();\n  }, [query]);\n\n  const updateQueryString = query => {\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n      {error &&\n        'There is some problems with loading this page. Please try to reload.'}\n      <SearchBar\n        onSubmit={handleSubmit}\n        onChange={updateQueryString}\n        value={query}\n      ></SearchBar>\n      <MovieList movies={movies} />\n    </>\n  );\n}\n"],"names":["Loader","height","width","radius","color","ariaLabel","wrapperClass","wrapperStyle","visible","axios","fetchMoviesByName","query","data","results","Input","styled","Button","SearchBar","onSubmit","useState","setQuery","event","preventDefault","trim","alert","autoComplete","value","placeholder","type","onChange","target","toLowerCase","FilmLink","Link","MovieList","movies","location","useLocation","map","id","title","to","state","from","size","Movies","useSearchParams","searchParams","setSearchParams","loading","setLoading","error","setError","setMovies","get","useEffect","getMoviesByName"],"sourceRoot":""}