{"version":3,"file":"static/js/346.c3538b0d.chunk.js","mappings":"4LACaA,EAAS,WACpB,OACE,SAAC,KAAD,CACEC,OAAQ,IACRC,MAAO,IACPC,OAAQ,EACRC,MAAM,YACNC,UAAU,wBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,GAGd,C,oHCVDC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAiB,mCAAG,WAAMC,GAAN,uFACRF,EAAAA,EAAAA,IAAA,gBACZE,EADY,4BALT,qCAIiB,cACzBC,EADyB,yBAIxBA,GAJwB,2CAAH,sD,oCCDf,SAASC,IACtB,IAAQF,GAAYG,EAAAA,EAAAA,MAAZH,QACR,GAA8BI,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,GAAgB,KAAZX,EAAJ,CACA,IAAMY,EAAU,mCAAG,oGAEfJ,GAAW,GAFI,SAGIT,EAAkBC,GAHtB,OAGTa,EAHS,OAIfP,EAAWO,EAAKA,KAAKC,SAJN,gDAMfJ,EAAS,4BANM,yBAQfF,GAAW,GARI,4EAAH,qDAWhBI,GAZ0B,CAa3B,GAAE,CAACZ,KAGF,gCACGO,IAAW,SAAClB,EAAA,EAAD,IACXoB,GAAS,2BACU,IAAnBJ,EAAQU,QACP,wBACGV,EAAQW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,qCAAaD,MACb,uBAAIC,MAFGF,EADE,OAQf,uDAIP,C","sources":["components/Loader/Loader.js","services/fetchMovieReviews.js","components/pages/Reviews/Reviews.js"],"sourcesContent":["import { BallTriangle } from 'react-loader-spinner';\nexport const Loader = () => {\n  return (\n    <BallTriangle\n      height={100}\n      width={100}\n      radius={5}\n      color=\"slateblue\"\n      ariaLabel=\"ball-triangle-loading\"\n      wrapperClass={{}}\n      wrapperStyle=\"\"\n      visible={true}\n    />\n  );\n};\n","import axios from 'axios';\n\nconst API_KEY = 'c65b1581ed69fd3b6701ed620730aaec';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response;\n};\n","import { fetchMovieReviews } from 'services/fetchMovieReviews';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from '../../Loader/Loader';\n\nexport default function Reviews() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (movieId === '') return;\n    const getReviews = async () => {\n      try {\n        setLoading(true);\n        const data = await fetchMovieReviews(movieId);\n        setReviews(data.data.results);\n      } catch {\n        setError('There is no reviews yet.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    getReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {error && 'There is no reviews yet.'}\n      {reviews.length !== 0 ? (\n        <ul>\n          {reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <h3>Author: {author}</h3>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <h2>There is no reviews yet.</h2>\n      )}\n    </>\n  );\n}\n"],"names":["Loader","height","width","radius","color","ariaLabel","wrapperClass","wrapperStyle","visible","axios","fetchMovieReviews","movieId","response","Reviews","useParams","useState","reviews","setReviews","loading","setLoading","error","setError","useEffect","getReviews","data","results","length","map","id","author","content"],"sourceRoot":""}