{"version":3,"file":"static/js/925.7b14d57a.chunk.js","mappings":"4LACaA,EAAS,WACpB,OACE,SAAC,KAAD,CACEC,OAAQ,IACRC,MAAO,IACPC,OAAQ,EACRC,MAAM,YACNC,UAAU,wBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,GAGd,C,+ICXDC,EAAAA,EAAAA,SAAAA,QAAyB,gCAClB,IAAMC,EAAc,mCAAG,WAAMC,GAAN,uFACLF,EAAAA,EAAAA,IAAA,gBACZE,EADY,4BAJT,qCAGc,cACtBC,EADsB,yBAIrBA,EAASC,KAAKC,MAJO,2CAAH,sD,SCCZ,SAASC,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOF,EAAP,KAAaG,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACQV,GAAYW,EAAAA,EAAAA,MAAZX,QAoBR,OAlBAY,EAAAA,EAAAA,YAAU,WACR,GAAgB,KAAZZ,EAAJ,CAGA,IAAMa,EAAO,mCAAG,oGAEZL,GAAW,GAFC,SAGOT,EAAeC,GAHtB,OAGNE,EAHM,OAIZI,EAAQJ,GAJI,gDAMZQ,EAAS,iCANG,yBAQZF,GAAW,GARC,4EAAH,qDAWbK,GAZC,CAaF,GAAE,CAACb,KAGF,2BACGO,IAAW,SAAClB,EAAA,EAAD,IACXoB,GAAS,iCACV,wBACGN,EAAKW,KAAI,SAAAC,GAAI,OACZ,2BACE,gBACEC,IAAG,0CAAqCD,EAAKE,cAC7CC,IAAKH,EAAKI,KACV5B,MAAM,SAER,wBAAKwB,EAAKI,QACV,uCAAeJ,EAAKK,eAPbL,EAAKM,GADF,QAcrB,C","sources":["components/Loader/Loader.js","services/fetchMovieCast.js","components/pages/Cast/Cast.js"],"sourcesContent":["import { BallTriangle } from 'react-loader-spinner';\nexport const Loader = () => {\n  return (\n    <BallTriangle\n      height={100}\n      width={100}\n      radius={5}\n      color=\"slateblue\"\n      ariaLabel=\"ball-triangle-loading\"\n      wrapperClass={{}}\n      wrapperStyle=\"\"\n      visible={true}\n    />\n  );\n};\n","import axios from 'axios';\nconst API_KEY = 'c65b1581ed69fd3b6701ed620730aaec';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nexport const fetchMovieCast = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data.cast;\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from '../../Loader/Loader';\nimport { fetchMovieCast } from 'services/fetchMovieCast';\n\nexport default function Cast() {\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (movieId === '') {\n      return;\n    }\n    const Content = async () => {\n      try {\n        setLoading(true);\n        const data = await fetchMovieCast(movieId);\n        setCast(data);\n      } catch {\n        setError('Sorry, we have no information');\n      } finally {\n        setLoading(false);\n      }\n    };\n    Content();\n  }, [movieId]);\n\n  return (\n    <div>\n      {loading && <Loader />}\n      {error && 'Sorry, we have no information'}\n      <ul>\n        {cast.map(item => (\n          <li key={item.id}>\n            <img\n              src={`https://image.tmdb.org/t/p/w500/${item.profile_path}`}\n              alt={item.name}\n              width=\"150\"\n            />\n            <h3>{item.name}</h3>\n            <p>Character: {item.character}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n"],"names":["Loader","height","width","radius","color","ariaLabel","wrapperClass","wrapperStyle","visible","axios","fetchMovieCast","movieId","response","data","cast","Cast","useState","setCast","loading","setLoading","error","setError","useParams","useEffect","Content","map","item","src","profile_path","alt","name","character","id"],"sourceRoot":""}