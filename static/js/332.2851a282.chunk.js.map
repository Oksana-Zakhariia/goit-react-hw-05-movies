{"version":3,"file":"static/js/332.2851a282.chunk.js","mappings":"+PAGAA,EAAAA,EAAAA,SAAAA,QAAyB,gCAClB,IAAMC,EAAc,mCAAG,WAAMC,GAAN,uFACLF,EAAAA,EAAAA,IAAA,gBACZE,EADY,4BAJT,qCAGc,cACtBC,EADsB,yBAIrBA,EAASC,KAAKC,MAJO,2CAAH,sD,SC6C3B,EA5Ca,WACX,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOD,EAAP,KAAaE,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACQT,GAAYU,EAAAA,EAAAA,MAAZV,QAqBR,OAnBAW,EAAAA,EAAAA,YAAU,WACR,GAAgB,KAAZX,EAAJ,CAGA,IAAMY,EAAO,mCAAG,oGAEZL,GAAW,GAFC,SAGOR,EAAeC,GAHtB,OAGNE,EAHM,OAIZG,EAAQH,GAJI,gDAMZO,EAAS,iCANG,yBAQZF,GAAW,GARC,4EAAH,qDAWbK,GAZC,CAaF,GAAE,CAACZ,IACJa,QAAQC,IAAIN,IAGV,2BACGF,IAAW,SAACS,EAAA,EAAD,KACZ,wBACGZ,EAAKa,KAAI,SAAAC,GAAI,OACZ,2BACE,gBACEC,IAAG,0CAAqCD,EAAKE,cAC7CC,IAAKH,EAAKI,KACVC,MAAM,SAER,wBAAKL,EAAKI,QACV,uCAAeJ,EAAKM,eAPbN,EAAKO,GADF,QAcrB,C,4EC/CYT,EAAS,WACpB,OACE,SAAC,KAAD,CACEU,OAAQ,IACRH,MAAO,IACPI,OAAQ,EACRC,MAAM,YACNC,UAAU,wBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,GAGd,C","sources":["services/fetchMovieCast.js","components/Cast/Cast.js","components/Loader/Loader.js"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = 'c65b1581ed69fd3b6701ed620730aaec';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nexport const fetchMovieCast = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data.cast;\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from '../Loader/Loader';\nimport { fetchMovieCast } from 'services/fetchMovieCast';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (movieId === '') {\n      return;\n    }\n    const Content = async () => {\n      try {\n        setLoading(true);\n        const data = await fetchMovieCast(movieId);\n        setCast(data);\n      } catch {\n        setError('Sorry, we have no information');\n      } finally {\n        setLoading(false);\n      }\n    };\n    Content();\n  }, [movieId]);\n  console.log(error);\n\n  return (\n    <div>\n      {loading && <Loader />}\n      <ul>\n        {cast.map(item => (\n          <li key={item.id}>\n            <img\n              src={`https://image.tmdb.org/t/p/w500/${item.profile_path}`}\n              alt={item.name}\n              width=\"150\"\n            />\n            <h3>{item.name}</h3>\n            <p>Character: {item.character}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\nexport default Cast;\n","import { BallTriangle } from 'react-loader-spinner';\nexport const Loader = () => {\n  return (\n    <BallTriangle\n      height={100}\n      width={100}\n      radius={5}\n      color=\"orangered\"\n      ariaLabel=\"ball-triangle-loading\"\n      wrapperClass={{}}\n      wrapperStyle=\"\"\n      visible={true}\n    />\n  );\n};\n"],"names":["axios","fetchMovieCast","movieId","response","data","cast","useState","setCast","loading","setLoading","error","setError","useParams","useEffect","Content","console","log","Loader","map","item","src","profile_path","alt","name","width","character","id","height","radius","color","ariaLabel","wrapperClass","wrapperStyle","visible"],"sourceRoot":""}