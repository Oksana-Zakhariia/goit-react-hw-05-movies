{"version":3,"file":"static/js/807.5a145228.chunk.js","mappings":"4LACaA,EAAS,WACpB,OACE,SAAC,KAAD,CACEC,OAAQ,IACRC,MAAO,IACPC,OAAQ,EACRC,MAAM,YACNC,UAAU,wBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,GAGd,C,6HCXDC,EAAAA,EAAAA,SAAAA,QAAyB,gCAClB,I,IAAMC,EAAY,mCAAG,WAAMC,GAAN,uFACHF,EAAAA,EAAAA,IAAA,iBAAoBE,EAApB,oBAHT,mCAGS,MADG,cACpBC,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sD,kBCHZC,EAAmB,SAAC,GAE1B,IAAD,IADJC,MAASC,EACL,EADKA,MAAOC,EACZ,EADYA,YAAaC,EACzB,EADyBA,SAAUC,EACnC,EADmCA,aAAcC,EACjD,EADiDA,aAAcC,EAC/D,EAD+DA,OAEnE,OACE,4BACE,gBAAKC,IAAG,0CAAqCL,GAAeM,IAAKP,KACjE,0BACGA,EADH,cACc,IAAIQ,KAAKL,GAAcM,mBAErC,uCAAeC,OAAOC,SAAwB,GAAfP,GAA/B,QACA,sCACA,yBAAIF,EAAJ,QACA,qCACA,wBACS,OAANG,QAAM,IAANA,OAAA,EAAAA,EAAQO,QAAS,EACdP,EAAOQ,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,MACrC,gBAIX,E,2BCpBOC,EAASC,EAAQ,IAAjBD,KAEKE,GAAaC,EAAAA,EAAAA,IAAOH,EAAPG,CAAH,iLASVC,EAAWD,EAAAA,GAAAA,GAAH,kNCJN,SAASE,IAAgB,IAAD,QACrC,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOxB,EAAP,KAAcyB,EAAd,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,EAAY,oBAAGF,EAASG,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAuB7C,OArBAC,EAAAA,EAAAA,YAAU,WACR,GAAgB,KAAZP,EAAJ,CAGA,IAAMQ,EAAI,mCAAG,oGAETX,GAAW,GAFF,SAGchC,EAAamC,GAH3B,OAGHjC,EAHG,OAIT4B,EAAS5B,GAJA,gDAMTgC,EACE,wEAPO,yBAUTF,GAAW,GAVF,4EAAH,qDAcVW,GAfC,CAgBF,GAAE,CAACR,KAGF,4BACE,SAACV,EAAD,CAAYmB,GAAIL,EAAhB,kBACCR,IAAW,SAACzC,EAAA,EAAD,IACX2C,GACC,wEACD,SAAC7B,EAAD,CAAkBC,MAAOA,KAC1B,4BACE,oDACA,2BACE,SAACsB,EAAD,WACE,SAACF,EAAD,CAAYmB,GAAI,OAAQJ,MAAO,CAAEC,KAAI,OAAEJ,QAAF,IAAEA,GAAF,UAAEA,EAAUG,aAAZ,aAAE,EAAiBC,MAAxD,qBAKF,SAACd,EAAD,WACE,SAACF,EAAD,CAAYmB,GAAI,UAAWJ,MAAO,CAAEC,KAAI,OAAEJ,QAAF,IAAEA,GAAF,UAAEA,EAAUG,aAAZ,aAAE,EAAiBC,MAA3D,2BAKJ,SAAC,EAAAI,SAAD,CAAUC,UAAU,gDAApB,UACE,SAAC,KAAD,WAKT,C","sources":["components/Loader/Loader.js","services/getMovieById.js","components/MovieInformation/MovieInformation.js","components/pages/MovieDetails/MovieDetails.styled.js","components/pages/MovieDetails/MovieDetails.js"],"sourcesContent":["import { BallTriangle } from 'react-loader-spinner';\nexport const Loader = () => {\n  return (\n    <BallTriangle\n      height={100}\n      width={100}\n      radius={5}\n      color=\"slateblue\"\n      ariaLabel=\"ball-triangle-loading\"\n      wrapperClass={{}}\n      wrapperStyle=\"\"\n      visible={true}\n    />\n  );\n};\n","import axios from 'axios';\n\nconst API_KEY = 'c65b1581ed69fd3b6701ed620730aaec';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nexport const getMovieById = async id => {\n  const response = await axios.get(`/movie/${id}?api_key=${API_KEY} `);\n  return response.data;\n};\n","import { PropTypes } from 'prop-types';\nexport const MovieInformation = ({\n  movie: { title, poster_path, overview, release_date, vote_average, genres },\n}) => {\n  return (\n    <div>\n      <img src={`https://image.tmdb.org/t/p/w500/${poster_path}`} alt={title} />\n      <h2>\n        {title} {`${new Date(release_date).getFullYear()}`}\n      </h2>\n      <p>User score {Number.parseInt(vote_average * 10)}%</p>\n      <h3>Overview</h3>\n      <p>{overview} </p>\n      <h3> Genres</h3>\n      <p>\n        {genres?.length > 0\n          ? genres.map(genre => genre.name).join(', ')\n          : 'No genres'}\n      </p>\n    </div>\n  );\n};\nMovieInformation.propTypes = {\n  title: PropTypes.string,\n  poster_path: PropTypes.string,\n  overview: PropTypes.string,\n  vote_average: PropTypes.number,\n  release_date: PropTypes.string,\n};\n","import styled from 'styled-components';\nconst { Link } = require('react-router-dom');\n\nexport const LinkStyled = styled(Link)`\n  text-decoration: none;\n  color: slateblue;\n  width: 80px;\n  padding: 8px 16px;\n  border-radius: 5px;\n  font-weight: 500;\n  margin-bottom: 20px;\n`;\nexport const ItemLink = styled.li`\n  width: 80px;\n  padding: 8px 16px;\n  border-radius: 5px;\n  font-weight: 500;\n  border: 2px solid slateblue;\n  &.active {\n    color: white;\n    background-color: slateblue;\n  }\n`;\n","import { useParams } from 'react-router-dom';\nimport { getMovieById } from 'services/getMovieById';\nimport { Outlet, useLocation } from 'react-router-dom';\nimport { useEffect, useState, Suspense } from 'react';\nimport { MovieInformation } from 'components/MovieInformation/MovieInformation';\nimport { Loader } from 'components/Loader/Loader';\nimport { ItemLink, LinkStyled } from './MovieDetails.styled';\n\nexport default function MovieDetails() {\n  const [movie, setMovie] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  useEffect(() => {\n    if (movieId === '') {\n      return;\n    }\n    const Film = async () => {\n      try {\n        setLoading(true);\n        const response = await getMovieById(movieId);\n        setMovie(response);\n      } catch {\n        setError(\n          'There is some problems with loading this page. Please try to reload.'\n        );\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    Film();\n  }, [movieId]);\n\n  return (\n    <div>\n      <LinkStyled to={backLinkHref}>Back</LinkStyled>\n      {loading && <Loader />}\n      {error &&\n        'There is some problems with loading this page. Please try to reload.'}\n      {<MovieInformation movie={movie} />}\n      <div>\n        <h2>Additional information</h2>\n        <ul>\n          <ItemLink>\n            <LinkStyled to={'cast'} state={{ from: location?.state?.from }}>\n              Cast\n            </LinkStyled>\n          </ItemLink>\n\n          <ItemLink>\n            <LinkStyled to={'reviews'} state={{ from: location?.state?.from }}>\n              Reviews\n            </LinkStyled>\n          </ItemLink>\n        </ul>\n        <Suspense fallback={<div>Loading subpage...</div>}>\n          <Outlet />\n        </Suspense>\n      </div>\n    </div>\n  );\n}\n"],"names":["Loader","height","width","radius","color","ariaLabel","wrapperClass","wrapperStyle","visible","axios","getMovieById","id","response","data","MovieInformation","movie","title","poster_path","overview","release_date","vote_average","genres","src","alt","Date","getFullYear","Number","parseInt","length","map","genre","name","join","Link","require","LinkStyled","styled","ItemLink","MovieDetails","useState","setMovie","loading","setLoading","error","setError","movieId","useParams","location","useLocation","backLinkHref","state","from","useEffect","Film","to","Suspense","fallback"],"sourceRoot":""}